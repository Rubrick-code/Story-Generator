import random

class StoryGenerator:
    def __init__(self):
        self.settings = ["in a dense forest", "in a thriving city", "on a distant planet", "in an ancient land",
                         "on a treacherous sea", "in a mysterious desert", "atop a snowy mountain", "in a hidden valley",
                         "inside a magical castle", "on a pirate ship"]
        self.characters = ["a great knight", "an adventurous explorer", "a cunning thief", "a wise wizard",
                           "an unwavering privateer", "a skilled archer", "a fearless warrior", "a clever alchemist",
                           "a noble prince", "a daring pirate"]
        self.character_traits = ["brave", "intelligent", "mysterious", "strong", "charismatic", "wise", "agile",
                                 "cunning", "kind", "resourceful"]
        self.problems = ["must find a hidden treasure", "is searching for a lost friend", "needs to solve an ancient riddle",
                         "has to escape from a maze", "must slay an evil dragon", "is challenged to win a tournament",
                         "must stop a war", "is tasked with saving a kingdom", "needs to uncover a conspiracy",
                         "has to break a curse"]
        self.solutions = ["with the help of a magical map", "by learning an important lesson", "using their wit and courage",
                          "with the aid of an unexpected ally", "through obtaining a new power", "by mastering a forgotten art",
                          "with a legendary weapon", "through a sacrifice", "by uniting rival factions",
                          "by deciphering an ancient prophecy"]
        self.plot_twists = ["but then discovers a hidden world", "but is betrayed by a trusted friend",
                            "and uncovers a secret about their past", "but then a greater threat emerges",
                            "and finds love along the way", "but must confront their own fears",
                            "and is faced with a moral dilemma", "but the goal is not what it seems",
                            "and learns the true cost of power", "and must protect a powerful artifact"]
        self.side_quests = ["rescue a village from bandits", "find a rare ingredient for a potion",
                            "deliver a mysterious message", "solve a series of riddles", "compete in a local festival",
                            "defend against a monster attack", "negotiate peace between feuding parties",
                            "retrieve a stolen item", "explore an ancient ruin", "help a stranger in need"]
        self.outcomes = ["the world is saved and the hero is celebrated", "the quest fails, but the hero learns a valuable lesson",
                         "the hero makes a noble sacrifice for the greater good", "the hero gains immense power but at a cost",
                         "the hero discovers a new purpose and continues their journey",
                         "peace is restored, but the hero remains vigilant", "the hero settles down to a quiet life",
                         "the hero becomes a legend, inspiring others", "the world changes forever due to the hero's actions",
                         "the hero's deeds are forgotten, but their impact endures"]
        self.epilogues = ["The world enters a new era of prosperity", "The hero's legacy is passed on to a new generation",
                          "A new threat looms on the horizon", "The hero's friends and allies remember their adventures fondly",
                          "The hero's story becomes a tale told throughout the ages", "New discoveries and explorations await",
                          "The hero's home is forever changed", "Peace reigns, but challenges remain",
                          "The hero's journey becomes a myth", "The hero's influence shapes the world in unseen ways"]

    def choose_element(self, element_list, prompt):
        print(prompt)
        for i, element in enumerate(element_list, start=1):
            print(f"{i}. {element}")
        choice = input("Enter your choice (number): ")
        return element_list[int(choice) - 1]

    def generate_random_element(self, element_list):
        return random.choice(element_list)

    def generate_story(self):
        # Player makes choices or selects random
        setting = self.choose_or_random(self.settings, "Choose a setting or type 'random': ")
        character = self.choose_or_random(self.characters, "Choose a character or type 'random': ")
        trait = self.choose_or_random(self.character_traits, "Choose a character trait or type 'random': ")
        problem = self.choose_or_random(self.problems, "Choose a problem or type 'random': ")
        solution = self.choose_or_random(self.solutions, "Choose a solution or type 'random': ")
        plot_twist = self.choose_or_random(self.plot_twists, "Choose a plot twist or type 'random': ")
        side_quest = self.choose_or_random(self.side_quests, "Choose a side quest or type 'random': ")
        outcome = self.choose_or_random(self.outcomes, "Choose an outcome or type 'random': ")
        epilogue = self.choose_or_random(self.epilogues, "Choose an epilogue or type 'random': ")

        # Assemble the story
        story = f"Once upon a time, a {trait} {character} was {setting}. The hero's journey began when they {problem}. "\
                f"Along the way, the hero {side_quest}. In their quest, they {solution}. Unexpectedly, they {plot_twist}. "\
                f"In the end, {outcome}. {epilogue}."

        return story

    def choose_or_random(self, element_list, prompt):
        choice = input(prompt)
        if choice.lower() == 'random':
            return self.generate_random_element(element_list)
        else:
            return self.choose_element(element_list, f"Choose an option for {prompt}")

# Example of using the StoryGenerator
story_generator = StoryGenerator()
print(story_generator.generate_story())
